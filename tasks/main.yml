- name: Create system user for the Node app
  user: name={{heljs_user}} comment="{{heljs_name}} system user" system=yes

- name: Install git
  apt: pkg={{item}} state=present update-cache=yes cache_valid_time=86400
  with_items:
  - git-core

- name: Install system package requirements for the node application
  apt: name="{{item}}" state=present
  with_items: "{{ heljs_syspkg_requirements }}"

- name: Creative directory for NVM
  become_user: "{{heljs_user}}"
  file: path=/home/{{heljs_user}}/nvm state=directory mode=0755

- name: Copy in frozen NVM version from deployment directory
  become_user: "{{heljs_user}}"
  copy: src=nvm.sh dest=/home/{{heljs_user}}/nvm/nvm.sh

# Projects are moving towards YARN, just install it always
- name: Add YARN repository key
  apt_key: url='https://dl.yarnpkg.com/debian/pubkey.gpg' state=present
  tags: yarn_install

- name: Add YARN repository
  apt_repository: repo='deb https://dl.yarnpkg.com/debian/ stable main' update_cache=yes state=present
  tags: yarn_install

# Note install_recommends=no, we do not wish to use system Node
# Instead we use node from NVM to use yarn
- name: Install && Update YARN
  apt: name=yarn state=present install_recommends=no
  tags: yarn_install

# This and the following stanzas use NVM to install specific node version
# They attempt to determine the location of said installation dynamically
# User only needs to specify the version they want to install
# Currently this only halfway done, as installation of node blocks
# any further installs

- name: Retrieve current node version (might not exist)
  slurp: src=/home/{{ heljs_user }}/nvm/alias/default
  register: nvm_default_version_base64
  ignore_errors: True

- name: Set version as fact
  set_fact:
    nvm_installed_version: "{{ nvm_default_version_base64['content'] | b64decode | default(0) }}"

- name: Trigger reinstall if different version in requested
  file: path=/home/{{ heljs_user }}/nvm/alias/default state=absent
  when: heljs_nodeversion != nvm_installed_version

# Makes use of NVM alias definition to prevent re-installation
- name: Install node and set version
  become_user: "{{heljs_user}}"
  shell: >
    /bin/bash -c 'source ~/nvm/nvm.sh && nvm install {{heljs_nodeversion}} && nvm alias default {{heljs_nodeversion}}'
    creates=/home/{{ heljs_user }}/nvm/alias/default

# The Node stored can be be used eg. from Django application run through Uwsgi
- name: Get and store path ($HOME/nvm/path_to_current) for current Node version
  become_user: "{{heljs_user}}"
  shell: >
    /bin/bash -c 'source ~/nvm/nvm.sh && dirname $(nvm which default) | tee ~/nvm/path_to_current'
  register: node_path_output
  tags: code_update

- name: Store node binary path as fact
  set_fact:
    node_binary_path: "{{node_path_output.stdout_lines[0]}}"
  tags: code_update

- name: Upgrade NPM to latest version (using itself)
  become_user: "{{heljs_user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: name=npm executable={{node_binary_path}}/npm global=yes state=latest production=yes
  when: heljs_upgrade_npm is defined

- name: Set package manager to use as a fact
  set_fact:
    npm_manager: "{{ heljs_use_yarn|ternary('yarn','npm') }}"
  tags: code_update

# Install needed Node.js prerequisites, PATH setup needed for NVM
# This is always done using npm for now
- name: Install needed global Node packages
  become_user: "{{heljs_user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: name={{item}} global=yes
  with_items: "{{heljs_npm_modules }}"
  when: not heljs_use_yarn

- name: Clone the the project source into build directory
  become_user: "{{heljs_user}}"
  git: repo={{heljs_git_repository}}
       dest=/home/{{heljs_user}}/build/{{heljs_name}}
       version={{heljs_git_version}}
  tags: code_update

# Install packages using NPM...
- name: Install project NPM packages using NPM
  become_user: "{{heljs_user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: path=/home/{{heljs_user}}/build/{{heljs_name}}
  tags: code_update
  when: not heljs_use_yarn

# ...or YARN
- name: Install project NPM packages using YARN
  become_user: "{{heljs_user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  command: yarn install
  args:
    chdir: /home/{{heljs_user}}/build/{{heljs_name}}
  tags: code_update
  when: heljs_use_yarn

- name: Clean YARN cache (if requested)
  become_user: "{{heljs_user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  command: yarn cache clean
  tags: code_update
  when: heljs_use_yarn and heljs_clean_caches

- set_fact:
    node_path:
      PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  tags: code_update

- name: Run commands to build the project
  become_user: "{{heljs_user}}"
  environment:
  # Construct build environment. Environment variables are used to control
  # many things in many a projects' build
    "{{ node_path | combine(heljs_build_environment|default({'ignore_me': 'ignore_me' })) }}"
  # chdir and command in this order to avoid quoting the whole thing
  command: chdir=/home/{{heljs_user}}/build/{{heljs_name}} {{ item }}
  with_items: "{{ heljs_build_commands }}"
  when: heljs_build_commands is defined
  tags: code_update

- name: Copy in project specific configuration files
  become_user: "{{heljs_user}}"
  copy: src="{{item.src}}" dest="/home/{{heljs_user}}/build/{{heljs_name}}/{{item.dst}}"
  with_items: "{{heljs_project_conffiles }}"

- name: Create destination directories for additional archives
  become_user: "{{ heljs_user }}"
  file: path=/home/{{ heljs_user}}/public/{{ item.dst }} state=directory
  with_items: "{{heljs_static_archives }}"

- name: Copy in additional static files for publishing
  become_user: "{{ heljs_user }}"
  unarchive: src={{ item.src }} dest=/home/{{ heljs_userÂ }}/public/{{ item.dst }}
  with_items: "{{heljs_static_archives }}"

# State directory (misnomer) contains both state and actions for managing
# the service (like backup config, scripts and reload touchpoint)
- name: Ensure service directories exist
  file: path=/home/{{heljs_user}}/{{item}} state=directory
  tags: code_update
  with_items:
    - service_state
    - service_tasks

- name: Removing possibly existing previous version
  file: path=/home/{{heljs_user}}/previous state=absent
  ignore_errors: yes
  tags: code_update

- name: Recreating previous directory
  become_user: "{{ heljs_user }}"
  file: path=/home/{{heljs_user}}/previous state=directory
  tags: code_update

- name: Install PM2 as global package (inside NVM)
  become_user: "{{heljs_user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: name=pm2 global=yes
  when: heljs_project_server
  notify: restart_pm2

- name: Set up project init for PM2
  template: src=pm2-app.json
            dest=/home/{{heljs_user}}/service_state/app.json
            owner={{heljs_user}}
            mode=0400
  when: heljs_project_server
  notify: restart_pm2

- name: Renaming current version (if it exists) to previous
  command: mv /home/{{heljs_user}}/{{heljs_name}} /home/{{heljs_user}}/previous
  args:
    removes: /home/{{heljs_user}}/{{heljs_name}}
  tags: code_update

- name: Renaming built version to current
  command: mv /home/{{heljs_user}}/build/{{heljs_name}} /home/{{heljs_user}}
  tags: code_update

# each frontend has their own PM2 instance runnning under their own user
- name: Create PM2 system startup for this project
  template: src=pm2-init.sh
            dest=/etc/init.d/{{heljs_name}}-pm2
            mode=0755
  when: heljs_project_server and heljs_use_init

- name: Enable PM2 startup through system init
  service: name={{heljs_name}}-pm2 enabled=yes
  when: heljs_project_server and heljs_use_init

# It seems to state=started has no effect when combined with
# enabled=yes (previous stanza)

- name: Ensure PM2 service is started
  service: name={{heljs_name}}-pm2 state=started
  when: heljs_project_server and heljs_use_init

# PM2 app.json configured above sets up listen for this file
- name: Touch the service reload flag file
  file: path=/home/{{heljs_user}}/service_state/touch_to_reload owner={{heljs_user}} state=touch
  tags: code_update
