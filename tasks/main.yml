- name: Create system user for the Node app
  user: name={{node_container.user}} comment="{{node_container.name}} system user" system=yes

- name: Creative directory for NVM
  become_user: "{{node_container.user}}"
  file: path=/home/{{node_container.user}}/nvm state=directory mode=0755

- name: Copy in frozen NVM version from deployment directory
  become_user: "{{node_container.user}}"
  copy: src=nvm.sh dest=/home/{{node_container.user}}/nvm/nvm.sh

# Projects are moving towards YARN, just install it always
- name: Add YARN repository key
  apt_key: url='https://dl.yarnpkg.com/debian/pubkey.gpg' state=present
  tags: yarn_install

- name: Add YARN repository
  apt_repository: repo='deb https://dl.yarnpkg.com/debian/ stable main' update_cache=yes state=present
  tags: yarn_install

- name: Install && Update YARN
  apt: name=yarn state=present
  tags: yarn_install

# This and the following stanzas use NVM to install specific node version
# They attempt to determine the location of said installation dynamically
# User only needs to specify the version they want to install
# Currently this only halfway done, as installation of node blocks
# any further installs

# Makes use of NVM alias definition to prevent re-installation
- name: Install node and set version
  become_user: "{{node_container.user}}"
  shell: >
    /bin/bash -c 'source ~/nvm/nvm.sh && nvm install {{node_container.nodeversion}} && nvm alias default {{node_container.nodeversion}}'
    creates=/home/{{ node_container.user }}/nvm/alias/default

# The Node stored can be be used eg. from Django application run through Uwsgi
- name: Get and store path ($HOME/nvm/path_to_current) for current Node version
  become_user: "{{node_container.user}}"
  shell: >
    /bin/bash -c 'source ~/nvm/nvm.sh && dirname $(nvm which default) | tee ~/nvm/path_to_current'
  register: node_path_output
  tags: code_update

- name: Store node binary path as fact
  set_fact:
    node_binary_path: "{{node_path_output.stdout_lines[0]}}"
  tags: code_update

- name: Upgrade NPM to latest version (using itself)
  become_user: "{{node_container.user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: name=npm executable={{node_binary_path}}/npm global=yes state=latest production=yes
  when: node_container.upgrade_npm is defined

- name: Install base packages for installing Node based stuff
  apt: pkg={{item}} state=present update-cache=yes cache_valid_time=86400
  with_items:
  - git-core
  - nginx
  tags: apt

- name: Set package manager to use as a fact
  set_fact:
    npm_manager: "{{ node_container.use_yarn|default(False)|ternary('yarn','npm') }}"
  tags: code_update

# Install needed Node.js prerequisites, PATH setup needed for NVM
# This is always done using npm for now
- name: Install needed global Node packages
  become_user: "{{node_container.user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: name={{item}} global=yes
  with_items: "{{node_container.npm_modules|default([]) }}"
  when: not node_container.use_yarn|default(False)

- name: Clone the the project source into build directory
  become_user: "{{node_container.user}}"
  git: repo={{node_container.git.url}}
       dest=/home/{{node_container.user}}/build/{{node_container.name}}
       version={{node_container.git.version}}
  tags: code_update

# Install packages using NPM...
- name: Install project NPM packages using NPM
  become_user: "{{node_container.user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: path=/home/{{node_container.user}}/build/{{node_container.name}}
  tags: code_update
  when: not node_container.use_yarn|default(False)

# ...or YARN
- name: Install project NPM packages using YARN
  become_user: "{{node_container.user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  command: yarn install
  args:
    chdir: /home/{{node_container.user}}/build/{{node_container.name}}
  tags: code_update
  when: node_container.use_yarn|default(False)

- set_fact:
    node_path:
      PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  tags: code_update

- name: Run commands to build the project
  become_user: "{{node_container.user}}"
  environment:
  # Construct build environment
    "{{ node_path | combine(node_container.build_environment|default({'ignore_me': 'ignore_me' })) }}"
  # chdir and command in this order to avoid quoting the whole thing
  command: chdir=/home/{{node_container.user}}/build/{{node_container.name}} {{ item }}
  with_items: "{{ node_container.build_commands }}"
  when: node_container.build_commands is defined
  tags: code_update

- name: Copy in project specific configuration files
  become_user: "{{node_container.user}}"
  copy: src="{{item.src}}" dest="/home/{{node_container.user}}/build/{{node_container.name }}/{{item.dst}}"
  with_items: "{{ node_container.project_conffiles | default([])}}"

- name: Create destination directories for additional archives
  become_user: "{{ node_container.user }}"
  file: path=/home/{{ node_container.user}}/public/{{ item.dst }} state=directory
  with_items: "{{ node_container.static_archives | default([])}}"

- name: Copy in additional static files for publishing
  become_user: "{{ node_container.user }}"
  unarchive: src={{ item.src }} dest=/home/{{ node_container.user }}/public/{{ item.dst }}
  with_items: "{{ node_container.static_archives | default([])}}"


# State directory (misnomer) contains both state and actions for managing
# the service (like backup config, scripts and reload touchpoint)
- name: Ensure service state directory exists
  file: path=/home/{{node_container.user}}/service_state state=directory
  tags: code_update

- name: Removing possibly existing previous version
  file: path=/home/{{node_container.user}}/previous state=absent
  ignore_errors: yes
  tags: code_update

- name: Recreating previous directory
  become_user: "{{ node_container.user }}"
  file: path=/home/{{node_container.user}}/previous state=directory
  tags: code_update

- name: Install PM2 as global package (inside NVM)
  become_user: "{{node_container.user}}"
  environment:
    PATH: "{{node_binary_path}}:{{ ansible_env.PATH }}"
  npm: name=pm2 global=yes
  when: node_container.project_server|default(False)

- name: Set up project init for PM2
  template: src=pm2-app.json
            dest=/home/{{node_container.user}}/service_state/app.json
            owner={{node_container.user}}
            mode=0400
  when: node_container.project_server|default(False)

- name: Renaming current version (if it exists) to previous
  command: mv /home/{{node_container.user}}/{{node_container.name}} /home/{{node_container.user}}/previous
  args:
    removes: /home/{{node_container.user}}/{{node_container.name}}
  tags: code_update

- name: Renaming built version to current
  command: mv /home/{{node_container.user}}/build/{{node_container.name}} /home/{{node_container.user}}
  tags: code_update

# each frontend has their own PM2 instance runnning under their own user
- name: Create PM2 system startup for this project
  template: src=pm2-init.sh
            dest=/etc/init.d/{{node_container.name}}-pm2
            mode=0755
  when: node_container.project_server|default(False)

- name: Enable PM2 startup through system init
  service: name={{node_container.name}}-pm2 enabled=yes
  when: node_container.project_server|default(False)

# It seems to state=started has no effect when combined with
# enabled=yes (previous stanza)

- name: Ensure PM2 service is started
  service: name={{node_container.name}}-pm2 state=started
  when: node_container.project_server|default(False)

# PM2 app.json configured above sets up listen for this file
- name: Touch the service reload flag file
  file: path=/home/{{node_container.user}}/service_state/touch_to_reload owner={{node_container.user}} state=touch
  tags: code_update

- name: Generate DH parameters if they don't already exist
  command: openssl dhparam -out /etc/ssl/dhparam.pem 2048
  args:
    creates: /etc/ssl/dhparam.pem

- debug: var=node_container.certchain

- name: Ensure certificate archive exists
  become: yes
  file:
    path: /etc/letsencrypt/archive/{{ node_container.webname }}
    state: directory
    mode: 0700
  when: node_container.certchain is defined

- name: Ensure certificate liveliness exists
  become: yes
  file:
    path: /etc/letsencrypt/live/{{ node_container.webname }}
    state: directory
    mode: 0700
  when: node_container.certchain is defined

- name: Copying certificates to server
  become: yes
  copy: src=private/tls/{{ node_container.canonical_name }}/{{ node_container.canonical_name }}-fullchain.pem
        dest=/etc/letsencrypt/archive/{{ node_container.canonical_name }}/fullchain.pem
        owner=root
        group=root
        directory_mode=0755
        mode=0444
        backup=yes
  when: node_container.certchain is defined

- name: Copying new keys to servers
  become: yes
  copy: src=private/tls/{{ node_container.canonical_name }}/{{ node_container.canonical_name }}.key
        dest=/etc/letsencrypt/archive/{{ node_container.canonical_name }}/privkey.pem
        owner=root
        group=root
        directory_mode=0750
        mode=0440
        backup=yes
  when: node_container.certchain is defined

- name: Ensure the link to newest certificate exists
  become: yes
  file: src={{ item.source }} path={{ item.dest }} state=link
  with_items:
    - source: /etc/letsencrypt/archive/{{ node_container.canonical_name }}/fullchain.pem
      dest: /etc/letsencrypt/live/{{ node_container.canonical_name }}/fullchain.pem
    - source: /etc/letsencrypt/archive/{{ node_container.canonical_name }}/privkey.pem
      dest: /etc/letsencrypt/live/{{ node_container.canonical_name }}/privkey.pem
  when: node_container.certchain is defined

- name: Set up nginx configuration
  template: src=nginx_site.j2
            dest=/etc/nginx/sites-available/{{node_container.name}}

- name: Ensure ACME challenge directory exists
  file: path=/srv/letsencrypt/challenges
        state=directory
        owner=root
        group=root

- name: Enable (symlink) nginx configuration
  file: force=yes state=link
        path=/etc/nginx/sites-enabled/{{node_container.name}}
        src=/etc/nginx/sites-available/{{node_container.name}}

- name: Reload nginx
  service: name=nginx state=reloaded
